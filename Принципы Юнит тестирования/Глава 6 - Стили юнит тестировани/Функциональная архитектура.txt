стр 161
 Целью функционального программирования является не полное исключение побочных
эффектов, а отделение кода, работающего с бизнес-логикой, от кода, создающего побочные эффекты. Эти две обязанности достаточно сложны сами по себе, а их смешение
многократно увеличивает сложность и вредит сопровождаемости кода в долгосрочной
перспективе. На помощь приходит функциональная архитектура. 
Она отделяет бизнеслогику от побочных эффектов, выводя побочные эффекты за границу бизнес-операций.
Разделение бизнес-логики и побочных эффектов осуществляется посредством изоляции двух типов кода:
 код, принимающий решение. Этот код не требует побочных эффектов, а следовательно, может записываться с использованием математических функций;
 код, действующий по результатам этого решения. Этот код преобразует все решения, принятые математическими функциями, в видимые артефакты — например,
изменения в базе данных или сообщения, отправленные по шине.
Код, принимающий решения, часто называется функциональным ядром (functional
core) (также известен как неизменяемое ядро, immutable core). Код, действующий по
результатам этих решений, называется изменяемой оболочкой (mutable shell)

стр 163 
Функциональное ядро и изменяемая оболочка взаимодействуют следующим образом:
 изменяемая оболочка собирает все входные данные;
 функциональное ядро генерирует решения;
 оболочка преобразует решения в побочные эффекты. (рис.6.9)

стр 164
 Функциональная архитектура является подмножеством гексагональной архитектуры.
Функциональную архитектуру можно рассматривать как гексагональную архитектуру,
возведенную в абсолют.
