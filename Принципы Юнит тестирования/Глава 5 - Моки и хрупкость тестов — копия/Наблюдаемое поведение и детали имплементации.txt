стр 124
Как говорилось в главе 4, хрупкость тестов соответствует второму атрибуту хорошего
юнит-теста: устойчивости к рефакторингу. (Напомню все четыре атрибута: защита от
багов, устойчивость к рефакторингу, быстрая обратная связь и простота поддержки.)
Метрика устойчивости к рефакторингу самая важная, так как наличие у юнит-теста
этой устойчивости — по большей части бинарный выбор (она либо есть, либо нет).
Следовательно, эту метрику желательно держать на максимально возможном уровне,
при условии что тест остается юнит-тестом и не переходит в категорию сквозных
тестов.
Последние, несмотря на лучшие показатели в области устойчивости к рефакторингу, обычно создают гораздо больше проблем с сопровождением.(имеется ввиду в читаемости теста)
В главе 4 также было показано, что главная причина, по которой тесты генерируют
ложные срабатывания (и таким образом теряют устойчивость к рефакторингу), заключается в их привязке к деталям имплементации тестируемого кода. Избежать такой привязки можно только одним способом: проверять конечный результат,
(наблюдаемое поведение системы) и отделять тесты от деталей имплементации настолько, насколько это возможно. Другими словами, тесты должны сосредоточиться
на том, *что* система делает, а не на том, *как* она это делает