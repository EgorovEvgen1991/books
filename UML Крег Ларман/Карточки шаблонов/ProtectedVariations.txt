Проблема: Как спроектировать объекты подсистемы и систему, что бы измеения этих элементов не оказывало нежелательного вляния на другие элементы?
Решение: Идентифицировать точки возможных выриаций или неустойчивости. Распределить обязанности таким образом, что бы обеспечить устойчивый интерфейс
Преимущество: 
Легкость доавбления новых расширений и вариациий
Возможномсть добваления нвых реализаций не затрагивая клиента.
Слабое связывание
Минимизация вляния изменений

Базовые механизмы защиты от вариаций:
1) Инкапсуляция
2) Интерфейсы
3) Полиморфизм
4) Перенаправление
Проектирование на основе данных  - защита системы от изменения данных, метаданных или других вариаций обечпечивается за счет внешнего расположения изменчивой информации и ее чтения на этапе выполнения врограммы.
Проектирование  на основе интепретаторов
Рефлексивное проетирование или проектирование на метауровне

Принцип подставновки Лискова- это формализация защиты влияния изменения в различных реализациях интерфейса или расширениях суперкласса.
Программные элементы(методы, класса и т.д) ссылсющиеся на тип Т(некоторый интрефейс или суперкласс), должны корретсно равботаь при доставновке вместо Т любой его реализации или подкласса S.

Сокрытие структуры
Закон деметры - Вкратце он сводится к небходимости избегать проектных решений продполонающиз передачу сообщений с удаленными непрямыми объестами.
Непрямыми считаются объекты известные другим объетам не не самому клиенту.
Don't talk to Strangers налагает ограничения на перечеь объектов которым определенный метод должен отправлять сообщения.
Этот закон гласит, что  в рамках метода сообщения должны отправляться только следующим объектам
1) объеты this
2) параметру этого метода
3) Атрибуту объекта this
4) Элементу коллекции, являющемуся атрбутом объекта self
5) Объекту созданному внутри метода
Основная цель этого шаблона избежать связывания клиентского объекта с нерямымми объектами.

КОГДА НЕ СЛЕДУЕТ ПРИМЕНЯТЬ ШАБЛОН. Следует применять два типа особых точек.
ТОЧКА ВАРИАЦИИ - точка ветвления в существующей на данный момент системе или в требованиях к ней
ТОЧКА ЭВОЛЮЦИИ - предпологаемая точка ветвления, которая может возникнуть в будещем, однако не определяемая существующим требованиям.
В обоих случаях  применяется шаблон - ОГОВОРКА если точка эволюции требует много усилий, то лучше оставновиться на работоспособной версии
1) Когда работает обработка строк. Trim().Substring()
2) DTO классы(у DTO отсутсуют методы)
3) При работе с коллекциями - рассматривается как элемент языка а не системы



